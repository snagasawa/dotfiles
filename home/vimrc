" General
set title
set ruler
set cmdheight=2
set wildmenu
set showmatch
set laststatus=2
set list
set listchars=tab:>-,trail:-,eol:↲
set autoread
set noswapfile

" Colorscheme
syntax on

" Line
set number
set wrap

" Tab
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab

" Indentation
set autoindent
set smartindent

" Search
set smartcase
set hlsearch
set incsearch


" ----------------------------------------------------------------
" # vim-plug
" ----------------------------------------------------------------
call plug#begin('~/.vim/plugged')


" ----------------------------------------------------------------
" ## Status Line
" ----------------------------------------------------------------
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'


" ----------------------------------------------------------------
" ## Asynchronous Completion
" ----------------------------------------------------------------
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1


" ----------------------------------------------------------------
" ## Snippet
" ----------------------------------------------------------------
Plug 'Shougo/neocomplete.vim'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'

" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif


" ----------------------------------------------------------------
" ## Git
" ----------------------------------------------------------------
Plug 'airblade/vim-gitgutter'
let g:gitgutter_terminal_reports_focus = 0

" --------------------
"
" --------------------
let g:python3_host_prog = expand("/Users/${USER}/.pyenv/shims/python")
Plug 'Shougo/denite.nvim'
nnoremap <space>g :Denite grep<CR>
nnoremap <space>r :Denite -resume<CR>
if executable('ag')
  let g:denite_source_grep_command = 'ag'
endif

Plug 'junegunn/vim-github-dashboard'
Plug 'junegunn/vim-emoji'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
nnoremap <space>f :FZF<CR>

Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
nnoremap <space>n :NERDTreeToggle<CR>
Plug 'alpaca-tc/alpaca_tags'
Plug 'szw/vim-tags'
Plug 'majutsushi/tagbar'
nnoremap <space>t :Tagbar<CR>

Plug 'thinca/vim-ref'
Plug 'yuku-t/vim-ref-ri'

Plug 'tpope/vim-endwise'
let g:indent_guides_enable_on_vim_startup = 1
Plug 'vim-scripts/AnsiEsc.vim'
Plug 'tomtom/tcomment_vim'

Plug 'tpope/vim-fugitive'
autocmd QuickFixCmdPost *grep* cwindow
Plug 'terryma/vim-multiple-cursors'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'marcus/rsense'
let g:rsenseHome = "/Users/snagasawa/.rbenv/shims/rsense"
let g:rsenseUseOmniFunc = 1
Plug 'tpope/vim-rails'

" Go
Plug 'fatih/vim-go'
Plug 'nsf/gocode'

" Scala
Plug 'derekwyatt/vim-scala'

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'elzr/vim-json'
Plug 'kchmck/vim-coffee-script'
Plug 'moll/vim-node'
Plug 'myhere/vim-nodejs-complete'
Plug 'digitaltoad/vim-pug'
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'leafgarland/typescript-vim'

" ESLint
Plug 'w0rp/ale'
let g:ale_completion_enabled = 1
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_javascript_eslint_executable = 'eslint'
let g:ale_javascript_eslint_use_global = 0
let g:ale_linters = { 'ruby': ['rubocop'], 'javascript': ['eslint'], }
let g:ale_set_signs = 1
let g:ale_set_highlights = 1
hi ALEWarning ctermbg=darkgray
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warn'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" Vue
Plug 'posva/vim-vue'
autocmd FileType vue syntax sync fromstart

" HTML
Plug 'taichouchou2/html5.vim'
Plug 'tpope/vim-haml'
Plug 'slim-template/vim-slim'

" CSS
Plug 'hail2u/vim-css3-syntax'

" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1

call plug#end()
